import org.gradle.api.GradleException

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.cloud:google-cloud-translate:2.49.0'
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.16.0'
    implementation 'com.google.cloud:google-cloud-storage:2.19.0'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'ch.qos.logback:logback-classic:1.2.6'
}

application {
    mainClass = 'com.example.GoogleTranslateService'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

shadowJar {
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'com.example.GoogleTranslateService'
    }
}

def getCredentialsPath() {
    def envCreds = System.getenv('GOOGLE_APPLICATION_CREDENTIALS')
    if (envCreds) {
        def credsFile = file(envCreds)
        if (credsFile.exists()) {
            return envCreds
        }
        // If the path exists but doesn't point to an existing file,
        // assume it's a relative path from the project directory
        return file(envCreds).absolutePath
    }

    // Default path for local development
    def defaultPath = '/users/ashutosh.kodadur/translate-project-a-512-61bfb908cde0.json'
    return defaultPath
}

tasks.register('translateProperties', JavaExec) {
    group = 'Translation'
    description = 'Translates application.properties file to target languages'
    mainClass = 'com.example.GoogleTranslateService'
    classpath = sourceSets.main.runtimeClasspath

    doFirst {
        def targetLanguages = project.findProperty('targetLanguages')
        if (!targetLanguages) {
            throw new GradleException("Target languages not specified. Use -PtargetLanguages=<language_code1,language_code2,...>")
        }

        def credentialsPath = getCredentialsPath()
        environment 'GOOGLE_APPLICATION_CREDENTIALS', credentialsPath

        if (!file(credentialsPath).exists()) {
            throw new GradleException("Google credentials file not found at: ${credentialsPath}. Working directory: ${projectDir}")
        }

        // Add validation for target languages format
        def languages = targetLanguages.split(',').toList()
        languages.each { lang ->
            if (!lang.matches('^[a-zA-Z]{2,3}(-[a-zA-Z]{2,4})?$')) {
                throw new GradleException("Invalid language code format: ${lang}")
            }
        }

        args = languages
    }

    systemProperty "file.encoding", "UTF-8"
    jvmArgs '-Dfile.encoding=UTF-8'
}

tasks.register('runJar', JavaExec) {
    group = 'Execution'
    description = 'Runs the shaded JAR file with specified arguments'
    classpath = files(tasks.shadowJar)

    doFirst {
        def targetLanguages = project.findProperty('targetLanguages')
        if (!targetLanguages) {
            throw new GradleException("Target languages not specified. Use -PtargetLanguages=<language_code1,language_code2,...>")
        }

        def credentialsPath = getCredentialsPath()
        environment 'GOOGLE_APPLICATION_CREDENTIALS', credentialsPath

        if (!file(credentialsPath).exists()) {
            throw new GradleException("Google credentials file not found at: ${credentialsPath}. Working directory: ${projectDir}")
        }

        // Add validation for target languages format
        def languages = targetLanguages.split(',').toList()
        languages.each { lang ->
            if (!lang.matches('^[a-zA-Z]{2,3}(-[a-zA-Z]{2,4})?$')) {
                throw new GradleException("Invalid language code format: ${lang}")
            }
        }

        args = languages
    }

    systemProperty "file.encoding", "UTF-8"
    jvmArgs '-Dfile.encoding=UTF-8'
}